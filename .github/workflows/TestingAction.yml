name : Communicating with Cliq

on:
  branch_protection_rule:
    #types : [created , edited , deleted]
  check_run:
    #types : [created , rerequested , completed , requested_action]
  check_suite:
    types : [rerequested,completed]
  create:
    # No Types
  delete:
    # No Types
  deployment:
    # No Types
  deployment_status:
    # No Types
  discussion:
    # types : [created , edited , deleted , transferred , pinned , unpinned , labeled , unlabeled , locked , unlocked , category_changed , answered , unanswered]
  discussion_comment:
    # types : [created , edited , deleted]
  fork:
    # No Types
  gollum:
    # No Types
  issues:
    # types : [opened , edited , deleted , transferred , pinned , unpinned , closed , reopened , assigned , unassigned , labeled , unlabeled , locked , unlocked , milestoned , demilestoned]
  issue_comment:
    # Use this for pull_request_comment also
    # types : [created , edited , deleted]
  label:
    # types : [created , edited , deleted]
  merge_group:
    # types : [checks_requested]
  milestone:
    # types : [created , closed , opened , edited , deleted]
  page_build:
    # No types
  project:
    # types : [created , closed , reopened , edited , deleted]
  project_card:
    # types : [created , moved , converted , edited , deleted]
  project_column: 
    # types : [created , updated , moved , deleted]
  public:
    # No Types
  pull_request:
    # It works only for opened , synchronize and reopened if not specified
    types: [ assigned , unassigned , labeled , unlabeled , opened , closed , edited , reopened , synchronize , converted_to_draft , ready_for_review , locked , unlocked , review_requested , review_request_removed , auto_merge_enabled , auto_merge_disabled ]
  #pull_request_target:
    # It works only for opened , synchronize and reopened if not specified
  #  types: [ assigned , unassigned , labeled , unlabeled , opened , closed , edited , reopened , synchronize , converted_to_draft , ready_for_review , locked , unlocked , review_requested , review_request_removed , auto_merge_enabled , auto_merge_disabled ]
  pull_request_review:
    # types : [submitted , edited , dismissed]
  pull_request_review_comment:
    # types : [created , edited , deleted]
  push:
    # No Types
  registry_package:
    # types : [published , updated]
  release:
    # types : [published , unpublished , created , edited , deleted , prereleased , released]
  repository_dispatch:
    # User Defined Types
    types: [on-demand-test]
  schedule:
    # 'Minute Hour Date Month Day'
    # 'Starting_Minute/Step_Value Hour Date Month , Day'
    - cron: '0 12 * * *'
  status:
    # No Types
  watch:
    # types : [started]
  workflow_dispatch:
    # No Types
  
jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - uses: CliqGeeks/CliqInformer@v1
        with:
          channel-endpoint: ${{ secrets.ENDPOINT }}
          #branch-protection-rule-message: 'Security Update â€‹:Security:\n (event) is (action) by (me) at (repo) under (ref)'
          #check-run-message: 'Check Run Status :server:\n (event) is (action) by (me) at (repo) under (ref)'
          #check-suite-message: 'Check Suite Status :server:\n (event) is (action) by (me) at (repo) under (ref)'
          #create-message: 'Creation :task:\n A (event) has occured'
          #delete-message: 'Delete :milestone:\n A (event) has occured'
          #deployment-message: 'Deployment :server:\n (event) is made successfully'
          #deployment-status-message: 'Deployment Status Updated :server:\n (event) is completed successfully'
          #discussion-message: 'Discussions :idea:\n A (event) has been (action)'
          #discussion-comment-message: 'Discussion Comment :idea:\n A (event) has been (action)'
          #fork-message: '(repo) has been forked by (me) under (ref)'
          #gollum-message: 'A (event) has Occured'
          #issues-message: 'Oops :surprise:\n A (event) is (action) by (me) at (repo) under (ref)'
          #issue-comment-message: 'Hey :awe:\n (workflow) (event) has been (action) by (me) at (repo) under (ref)'
          #label-message: 'Seems Like New Issues required New Labels :curious:\n A (event) has been (action) by (me)'
          #merge-group-message: '(workflow) is triggered by (me) at (repo) under (ref)'
          #milestone-message: 'Goals need to be Changed as the Project Progresses :milestone:\n A (event) is (action)'
          #page-build-message: '(ref) Branch of (event) is changed by (me)'
          #project-message: 'Good Projects are planned well:report:\n A (event) is (action) by (me) at (ref)'
          #project-card-message: 'Good Projects are planned well:report:\n A (event) is (action) by (me) at (ref)'
          #project-column-message: 'Good Projects are planned well:report:\n A (event) is (created) by (me) at (ref)'
          #public-message: 'An Idea is Beneficial Only when it gives back to the Community :peace:\n (repo) is now Public :celebrate:'
          #pull-request-message: 'A (event) is (action) at (repo) under (ref)'
          #pull-request-comment-message: 'You have got a Comment for a Pull Request Dude :curious:\n A (event) is (action) at (repo) under (ref)'
          #pull-request-target-message: 'A (event) is (action) at (repo) under (ref)'
          #pull-request-review-message: 'You have got a Review Dude :curious:\n A (event) is (action) at (repo) under (ref)'
          #pull-request-review-comment-message: 'You have got a Review Comment Dude :curious:\n A (event) is (action) at (repo) under (ref)'
          #push-message: 'A (event) is made into (repo) under (ref).\n Good to see you make some Changes :new-year:'
          #registry-package-message: ':gift-box: A Build is (action) at (repo)'
          #release-message: ':target: (ref) has been (action) Successfully'
          #repository-dispatch-message: ':report: A (event) has triggered this following workflow: (workflow)'
          #schedule-message: 'Scheduled Event Trigger :calendar:\n (workflow) has been Scheduled to run at this time. Take a Look at it here (workflow)'
          #status-message: 'Status has been Updated at (repo)'
          #watch-message: ':fireworks: (me) has starred your Repository (repo)'
          #workflow-dispatch-message: ':office: (workflow) has been dispatched by (me) at (repo) under (ref)'
          #default-message: '(event) has happened. Hope You are Aware of it :wink:'
          # the message sent when the user doesn't want to enter all the 35 messages and just handle the same message to different messages.
          # this message is sent only when the custom message is not provided by the user.
          # ie. if a push occurs the push-message will be sent. In case it is not provided. The default-message will be sent. 
          # If the default-message is not given by user, 'The Workflow (workflow) is triggered by a (event) (action) by (me) at Repository (repo) under (ref)' will be sent 
          #set-message-if-none: true
          # false makes CliqInformer not send the system defined default message if custom message is not set
          # isn't checked if default-message is given
